status x stands for returns status 200 or 200 with json or status 4xx for error whitout json
-> stands for URL to query
json: stands for properly formatted json
* stands for unimplemented but existing api endpoint
Some parameters might be optional, if they are not present empty value will be provided instead


UserLogIn(email, pass) 
POST -> "/api/auth/login" 
expects json: {email, password},
returns status x json: {accessToken, refreshToken}


UserSignUp(fullName, userType, email, phoneNumber, pass) 
// WARNING
// userType is not implemented in DB neither in backend and so is omitted
// in storage.createUser
POST ->  "/api/auth/register" 
expects json: {name, userType, email, password, phone_number},
returns status x


*CreateLocation(user_id, name, address, phoneNumber, business_email, coordinates, description,
               List<categories>, workingHours, website, delivery, cardPayment, 
               image, List<products>, List<keywords>) 
// fill absolute minimum to create location and other can be NULL
POST -> "/api/locations/create_location" /auth required/
expects json: {address, email, name, category(?int?), delivery, description, image, keywords, latitude, 
               longtitude, region(int), phone_number, pos_terminal, schedule, website }
returns status x


GetMapLocations()
// Give all locations in a sqare between loc1 and loc2 in a square 
POST -> "/api/locations/get_locations_between"
expects json: {loc1_longtitude, loc1_latitude, loc2_longtitude, loc2_latitude}
returns json: {{location_id, category, name, longtitude, latitude}}


GetLocationInfo(id)
GET -> "/api/locations/:locationId"
returns json: {address, email, delivery, description, image, keywords, region,
               phone_number, pos_terminal, rating_average, rating_count, schedule, website, review(first) }


GetLocationReviews(locationID, lastReviewID)
// TODO Now we are going to sort by id but later change by date
// Get the next 5 reviews starting from reviewId for a location
GET -> "/api/locations/:locationId/reviews/:reviewId"
returns json: {5x{review_id, users.name, comment, rating}}


*ReportLocation(phoneNumber, locationID, reportType, message)
POST -> "/api/locations/:locationId/reports" /auth required/
expects json: {report_type, content}
returns x


*PostUserReview(userID, locationID, rating, comment)
POST -> "/api/locations/:locationId/reviews" /auth required/
expects json: {user_id, rating, comment}
returns x


SearchLocation(searchString)
GET -> "/api/locations/search?"
expects paramers: {search_string}
returns json: {{location_id, business_name, address, category, longtitude, latitude}}


GetUserLocations(userID)
GET -> "/api/users/locations" /auth required/
returns json: {{location_id, name, address, image, verified}}


GetUserName(sessionToken)
// TODO change?
// Probably a bad idea to pass around access/refresh token in order to obtain username?
// Also the JWT token CONTAINS the user id in unencrypted variant. 
// So we can use getUserName(userID)
// Also a function that gives ALL user data and saves it in the device sounds better? (done)
GET -> "/api/users/name" /auth required/
returns json: {name}

GetUserInfo(sessionToken)
// Again same as GetUserName comment
GET -> "/api/users" /auth required/
returns json: {user_id, name, phone_number, email}


*UpdateUserPassword(oldPass, newPass)
// TODO might change for patch
POST -> "/api/auth/password" /auth required/
expects json: { old_password, new_password }
returns x


GetLocationContacts(locationID)
GET -> "/api/locations/:locationId/contacts"
returns json: {business_email(nullable), phone_number}


GetLocationDeliveryAndPaymentInfo(locationID)
GET -> "/api/locations/:locationId/delivery_pos_info"
returns json: {delivery, pos_terminal, website(optional)}


GetLocationWorkingHours(locationID)
GET -> "/api/locations/:locationId/schedule"
returns json: {schedule}


*GetLocationProducts(locationID)
GET -> "/api/locations/:locationId/products"
returns json: {{product_id, image, product_name, price, price_measurement}}


GetLocationCategories(locationID)
GET -> "/api/locations/:locationId/category"
returns json: {category}


GetLocationCoordinates(locationID)
GET -> "/api/locations/:locationId/coordinates"
returns json: {latitude, longtitude}


GetLocationDescription(locationID)
GET -> "/api/locations/:locationId/description"
returns json: {description}


GetLocationKeyWords(locationID)
GET -> "/api/locations/:locationId/keywords"
returns json: {keywords}


UpdateProductInfo(productID, name, price, measurement, image)
PATCH -> "/api/locations/:locationId/products/:productId"
returns x


Yet unused from frontend:
POST -> "/api/auth/logout" /auth required/
POST -> "/api/auth/refresh" - refresh token